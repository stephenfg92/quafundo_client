{"ast":null,"code":"var _jsxFileName = \"D:\\\\Te\\\\dev\\\\quafundo_client\\\\react-api\\\\src\\\\components\\\\quiz.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = async e => {\n      var _Object$keys$length;\n\n      e.preventDefault();\n      this.resultCount = 0;\n      const answerCount = (_Object$keys$length = Object.keys(this.data).length) !== null && _Object$keys$length !== void 0 ? _Object$keys$length : 0;\n\n      if (answerCount !== this.questionCount) {\n        this.shouldWarn = true;\n        this.setState({\n          waiting: true\n        });\n      } else {\n        this.shouldWarn = false;\n        await fetch(process.env.REACT_APP_API_URL + 'responder', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.data)\n        }).then(async response => {\n          this.setState({\n            results: await response.json(),\n            waiting: false\n          });\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    };\n\n    this.handleChange = e => {\n      const key = e.target.name.toString();\n      const value = e.target.value.toString();\n      this.data[key] = value;\n    };\n\n    this.state = {\n      results: []\n    };\n    this.data = {};\n    this.questionCount = 0;\n    this.resultCount = 0;\n    this.shouldCount = false;\n    this.shouldWarn = false;\n  } // Envia as respostas para o servidor.\n\n\n  // Apresenta a descrição do quiz.\n  renderDescription() {\n    const description = this.props.quiz.description;\n\n    if (typeof description === 'undefined') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 59\n      }, this);\n    }\n\n    const imgURL = this.props.quiz.imgURL;\n\n    if (typeof imgURL !== 'undefined' && typeof imgURL !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundImage: `url(${imgURL})`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"card-title text-center font-weight-bold py-4\",\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 66\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"card-title text-center\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  } // Apresenta cada uma das perguntas do quiz.\n\n\n  renderQuestions() {\n    const questions = this.props.quiz.perguntas;\n\n    if (typeof questions === 'undefined') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 57\n      }, this);\n    }\n\n    if (this.questionCount === 0) {\n      this.questionCount = questions.length;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center mb-3\",\n          children: [\" \", question.description, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 39\n        }, this), \" \", this.renderAlternatives(question._id, question.alternatives), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  } // Apresenta as alternativas de cada questão\n\n\n  renderAlternatives(questionId, alternatives) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: alternatives.map((alternative, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: questionId,\n            value: alternative._id,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 34\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ml-2\",\n            children: [alternative.text, \" \", this.renderResult(alternative._id)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 135\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  } // Indica se o usuário acertou ou não determinada pergunta.\n\n\n  renderResult(alternativeId) {\n    const result = this.state.results[alternativeId];\n\n    if (result !== undefined) {\n      this.shouldCount = true;\n    }\n\n    if (result === true) {\n      this.resultCount += 1;\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi-check-circle-fill text-success ml-2\",\n        role: \"img\",\n        \"aria-label\": \"acertou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (result === false) {\n      return /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi-x-circle-fill text-danger ml-2\",\n        role: \"img\",\n        \"aria-label\": \"errou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 20\n      }, this);\n    }\n  } // Faz a contagem de acertos\n\n\n  renderCount() {\n    if (this.shouldWarn) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: \" Voc\\xEA ainda n\\xE3o respondeu todas as perguntas!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.shouldCount) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: [\" Voc\\xEA acertou \", this.resultCount, \" de \", this.questionCount, \" quest\\xF5es \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this);\n    }\n  } // Apresnta o botão para envio das respostas ao servidor\n\n\n  renderButton() {\n    if (!this.shouldWarn) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-primary\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-danger\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-10 col-lg-5 mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [this.renderDescription(), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.onSubmit,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [this.renderQuestions(), this.renderButton(), this.renderCount()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["D:/Te/dev/quafundo_client/react-api/src/components/quiz.js"],"names":["React","require","config","Quiz","Component","constructor","props","onSubmit","e","preventDefault","resultCount","answerCount","Object","keys","data","length","questionCount","shouldWarn","setState","waiting","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","then","response","results","json","catch","error","console","log","handleChange","key","target","name","toString","value","state","shouldCount","renderDescription","description","quiz","imgURL","backgroundImage","renderQuestions","questions","perguntas","map","question","index","renderAlternatives","_id","alternatives","questionId","alternative","text","renderResult","alternativeId","result","undefined","renderCount","renderButton","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,QAXmB,GAWR,MAAMC,CAAN,IAAW;AAAA;;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,WAAL,GAAmB,CAAnB;AAEA,YAAMC,WAAW,0BAAGC,MAAM,CAACC,IAAP,CAAY,KAAKC,IAAjB,EAAuBC,MAA1B,qEAAoC,CAArD;;AAEA,UAAIJ,WAAW,KAAK,KAAKK,aAAzB,EAAwC;AACpC,aAAKC,UAAL,GAAkB,IAAlB;AACA,aAAKC,QAAL,CAAc;AAACC,UAAAA,OAAO,EAAE;AAAV,SAAd;AACH,OAHD,MAII;AACA,aAAKF,UAAL,GAAkB,KAAlB;AAEA,cAAMG,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,WAAjC,EAA8C;AACrDC,UAAAA,MAAM,EAAE,MAD6C;AAErDC,UAAAA,OAAO,EAAE;AAAC,4BAAgB;AAAjB,WAF4C;AAGrDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,KAAKd,IAApB;AAH+C,SAA9C,CAAL,CAKLe,IALK,CAKA,MAAMC,QAAN,IAAkB;AAAE,eAAKZ,QAAL,CAAc;AAACa,YAAAA,OAAO,EAAE,MAAMD,QAAQ,CAACE,IAAT,EAAhB;AAAiCb,YAAAA,OAAO,EAAE;AAA1C,WAAd;AAAiE,SALrF,EAMLc,KANK,CAMEC,KAAK,IAAI;AAACC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,SAN/B,CAAN;AAOH;AAEJ,KAjCkB;;AAAA,SAoCnBG,YApCmB,GAoCJ7B,CAAC,IAAI;AAChB,YAAM8B,GAAG,GAAG9B,CAAC,CAAC+B,MAAF,CAASC,IAAT,CAAcC,QAAd,EAAZ;AACA,YAAMC,KAAK,GAAGlC,CAAC,CAAC+B,MAAF,CAASG,KAAT,CAAeD,QAAf,EAAd;AACA,WAAK3B,IAAL,CAAUwB,GAAV,IAAiBI,KAAjB;AACH,KAxCkB;;AAEf,SAAKC,KAAL,GAAa;AAACZ,MAAAA,OAAO,EAAE;AAAV,KAAb;AACA,SAAKjB,IAAL,GAAY,EAAZ;AACA,SAAKE,aAAL,GAAqB,CAArB;AACA,SAAKN,WAAL,GAAmB,CAAnB;AACA,SAAKkC,WAAL,GAAmB,KAAnB;AACA,SAAK3B,UAAL,GAAkB,KAAlB;AACH,GAT8B,CAW/B;;;AAgCA;AACA4B,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,WAAW,GAAG,KAAKxC,KAAL,CAAWyC,IAAX,CAAgBD,WAApC;;AAEA,QAAI,OAAOA,WAAP,KAAwB,WAA5B,EAAyC;AAAC,0BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAAkC;;AAE5E,UAAME,MAAM,GAAG,KAAK1C,KAAL,CAAWyC,IAAX,CAAgBC,MAA/B;;AACA,QAAI,OAAOA,MAAP,KAAmB,WAAnB,IAAkC,OAAOA,MAAP,KAAmB,IAAzD,EAA+D;AAC3D,0BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,eAAe,EAAG,OAAMD,MAAO;AAAhC,SAAZ;AAAA,+BAAiD;AAAI,UAAA,SAAS,EAAC,8CAAd;AAAA,oBAA8DF;AAA9D;AAAA;AAAA;AAAA;AAAA;AAAjD;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;;AAED,wBACI;AAAI,MAAA,SAAS,EAAC,wBAAd;AAAA,gBAAwCA;AAAxC;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GA3D8B,CA6D/B;;;AACAI,EAAAA,eAAe,GAAG;AACd,UAAMC,SAAS,GAAG,KAAK7C,KAAL,CAAWyC,IAAX,CAAgBK,SAAlC;;AAEA,QAAI,OAAOD,SAAP,KAAsB,WAA1B,EAAuC;AAAC,0BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AAAkC;;AAE1E,QAAI,KAAKnC,aAAL,KAAuB,CAA3B,EAA8B;AAAC,WAAKA,aAAL,GAAqBmC,SAAS,CAACpC,MAA/B;AAAsC;;AAErE,wBACI;AAAA,gBACIoC,SAAS,CAACE,GAAV,CAAe,CAACC,QAAD,EAAWC,KAAX,kBACX;AAAA,qCAAkB;AAAI,UAAA,SAAS,EAAC,kBAAd;AAAA,0BAAmCD,QAAQ,CAACR,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlB,OAAkF,KAAKU,kBAAL,CAAwBF,QAAQ,CAACG,GAAjC,EAAsCH,QAAQ,CAACI,YAA/C,CAAlF;AAAA,SAAUH,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GA7E8B,CA+E/B;;;AACAC,EAAAA,kBAAkB,CAACG,UAAD,EAAYD,YAAZ,EAA0B;AACxC,wBACI;AAAA,gBAEQA,YAAY,CAACL,GAAb,CAAkB,CAACO,WAAD,EAAcL,KAAd,kBACd;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACI;AAAA,uCAAK;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,IAAI,EAAEI,UAA1B;AAAsC,YAAA,KAAK,EAAEC,WAAW,CAACH,GAAzD;AAA+D,YAAA,QAAQ,EAAE,KAAKpB;AAA9E;AAAA;AAAA;AAAA;AAAA,kBAAL,oBAA0G;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAA,uBAAwBuB,WAAW,CAACC,IAApC,OAA2C,KAAKC,YAAL,CAAkBF,WAAW,CAACH,GAA9B,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,SAA2BF,KAA3B;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GA5F8B,CA8F/B;;;AACAO,EAAAA,YAAY,CAACC,aAAD,EAAgB;AAExB,UAAMC,MAAM,GAAG,KAAKrB,KAAL,CAAWZ,OAAX,CAAmBgC,aAAnB,CAAf;;AACA,QAAIC,MAAM,KAAKC,SAAf,EAA0B;AAAC,WAAKrB,WAAL,GAAmB,IAAnB;AAAwB;;AAEnD,QAAIoB,MAAM,KAAK,IAAf,EAAqB;AACjB,WAAKtD,WAAL,IAAoB,CAApB;AACA,0BAAO;AAAG,QAAA,SAAS,EAAC,wCAAb;AAAsD,QAAA,IAAI,EAAC,KAA3D;AAAiE,sBAAW;AAA5E;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,QAAIsD,MAAM,KAAK,KAAf,EAAsB;AAClB,0BAAO;AAAG,QAAA,SAAS,EAAC,mCAAb;AAAiD,QAAA,IAAI,EAAC,KAAtD;AAA4D,sBAAW;AAAvE;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AAEJ,GA5G8B,CA8G/B;;;AACAE,EAAAA,WAAW,GAAG;AAEV,QAAI,KAAKjD,UAAT,EAAqB;AACjB,0BAAQ;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;;AAED,QAAI,KAAK2B,WAAT,EAAsB;AAClB,0BAAQ;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA,wCAAsC,KAAKlC,WAA3C,UAA4D,KAAKM,aAAjE;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;AACJ,GAxH8B,CA0H/B;;;AACAmD,EAAAA,YAAY,GAAG;AACX,QAAI,CAAC,KAAKlD,UAAV,EAAsB;AAClB,0BAAO;AAAQ,QAAA,SAAS,EAAC,yBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAFD,MAGK;AACD,0BAAO;AAAQ,QAAA,SAAS,EAAC,wBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ;;AAEDmD,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,iBAAjB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,uBACK,KAAKvB,iBAAL,EADL,eAEI;AAAM,cAAA,QAAQ,EAAE,KAAKtC,QAArB;AAAA,qCACI;AAAA,2BACK,KAAK2C,eAAL,EADL,EAES,KAAKiB,YAAL,EAFT,EAGS,KAAKD,WAAL,EAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAkBH;;AAvJ8B;;AA0JnC,eAAe/D,IAAf","sourcesContent":["import React from 'react'\r\nrequire('dotenv').config()\r\n\r\nclass Quiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {results: []}\r\n        this.data = {}\r\n        this.questionCount = 0\r\n        this.resultCount = 0\r\n        this.shouldCount = false\r\n        this.shouldWarn = false\r\n    }\r\n\r\n    // Envia as respostas para o servidor.\r\n    onSubmit = async e => {\r\n        e.preventDefault();\r\n        this.resultCount = 0;\r\n\r\n        const answerCount = Object.keys(this.data).length ?? 0;\r\n\r\n        if (answerCount !== this.questionCount) {\r\n            this.shouldWarn = true;\r\n            this.setState({waiting: true})\r\n        }\r\n        else{\r\n            this.shouldWarn = false;\r\n\r\n            await fetch(process.env.REACT_APP_API_URL + 'responder', {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify(this.data),\r\n            })\r\n            .then(async response => { this.setState({results: await response.json(), waiting: false}) })\r\n            .catch( error => {console.log(error)})\r\n        }\r\n\r\n    }\r\n\r\n    // Conforme o usuário seleciona alternativas, acumula dados para enviar ao servidor.\r\n    handleChange = e => {\r\n        const key = e.target.name.toString()\r\n        const value = e.target.value.toString()\r\n        this.data[key] = value\r\n    }\r\n\r\n    // Apresenta a descrição do quiz.\r\n    renderDescription() {\r\n        const description = this.props.quiz.description\r\n        \r\n        if (typeof(description) === 'undefined') {return (<div>carregando...</div>)}\r\n\r\n        const imgURL = this.props.quiz.imgURL\r\n        if (typeof(imgURL) !== 'undefined' && typeof(imgURL) !== null) {\r\n            return (\r\n                <div style={{backgroundImage: `url(${imgURL})`}}><h1 className=\"card-title text-center font-weight-bold py-4\">{description}</h1></div>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <h1 className=\"card-title text-center\">{description}</h1>\r\n        )\r\n    }\r\n\r\n    // Apresenta cada uma das perguntas do quiz.\r\n    renderQuestions() {\r\n        const questions = this.props.quiz.perguntas\r\n\r\n        if (typeof(questions) === 'undefined') {return (<div>carregando...</div>)}\r\n\r\n        if (this.questionCount === 0) {this.questionCount = questions.length}\r\n\r\n        return (\r\n            <div>\r\n            {   questions.map( (question, index) => (\r\n                    <div key={index}> <h3 className=\"text-center mb-3\"> {question.description} </h3> {this.renderAlternatives(question._id, question.alternatives)} </div> \r\n                )) \r\n            } \r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Apresenta as alternativas de cada questão\r\n    renderAlternatives(questionId,alternatives) {\r\n        return(\r\n            <div>\r\n                {\r\n                    alternatives.map( (alternative, index) => (\r\n                        <div className=\"mb-3\" key={index}>\r\n                            <h5> <input type=\"radio\" name={questionId} value={alternative._id}  onChange={this.handleChange}></input> <span className=\"ml-2\">{alternative.text} {this.renderResult(alternative._id)}</span></h5>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Indica se o usuário acertou ou não determinada pergunta.\r\n    renderResult(alternativeId) {\r\n\r\n        const result = this.state.results[alternativeId]\r\n        if (result !== undefined) {this.shouldCount = true}\r\n        \r\n        if (result === true) {\r\n            this.resultCount += 1;\r\n            return <i className=\"bi-check-circle-fill text-success ml-2\" role=\"img\" aria-label=\"acertou\"></i>\r\n        }\r\n        if (result === false) {\r\n            return <i className=\"bi-x-circle-fill text-danger ml-2\" role=\"img\" aria-label=\"errou\"></i>\r\n        }\r\n\r\n    }\r\n\r\n    // Faz a contagem de acertos\r\n    renderCount() {\r\n\r\n        if (this.shouldWarn) { \r\n            return (<span className=\"ml-2\"> Você ainda não respondeu todas as perguntas!</span>)\r\n        }\r\n\r\n        if (this.shouldCount) {\r\n            return (<span className=\"ml-2\"> Você acertou {this.resultCount} de {this.questionCount} questões </span>)\r\n        }\r\n    }\r\n\r\n    // Apresnta o botão para envio das respostas ao servidor\r\n    renderButton() {\r\n        if (!this.shouldWarn) {\r\n            return <button className=\"btn btn-outline-primary\">Enviar</button>\r\n        }\r\n        else {\r\n            return <button className=\"btn btn-outline-danger\">Enviar</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className = \"container-fluid\">\r\n                <div className=\"col-md-10 col-lg-5 mx-auto\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            {this.renderDescription()}\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div>\r\n                                    {this.renderQuestions()}\r\n                                        {this.renderButton()}\r\n                                        {this.renderCount()}\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}