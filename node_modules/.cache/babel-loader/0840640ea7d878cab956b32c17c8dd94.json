{"ast":null,"code":"var _jsxFileName = \"D:\\\\Te\\\\dev\\\\quafundo_client\\\\react-api\\\\src\\\\components\\\\quiz.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = async e => {\n      e.preventDefault();\n      await fetch('http://localhost:8000/responder', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.data)\n      }).then(async response => {\n        this.setState({\n          results: await response.json()\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.handleChange = e => {\n      const key = e.target.name.toString();\n      const value = e.target.value.toString();\n      this.data[key] = value;\n    };\n\n    this.state = {\n      questions: [],\n      results: []\n    };\n    this.data = {};\n    this.results = {};\n  }\n\n  componentDidMount() {}\n\n  renderDescription() {\n    const description = this.props.quiz.description;\n\n    if (typeof description === 'undefined') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 59\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderQuestions() {\n    const questions = this.props.quiz.perguntas;\n\n    if (typeof questions === 'undefined') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 57\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", question.description, \" \", this.renderAlternatives(question._id, question.alternatives), \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderAlternatives(questionId, alternatives) {\n    //{this.state.results[alternative._id]}\n    console.log('Results: ', this.state.results); //console.log('Len results ', this.state.results.length)\n    //console.log('questionId: ', questionId)\n    //console.log(\"result: \", this.state.results[questionId])\n\n    alternatives.map((alternative, index) => //console.log(\"alternative._id: \", alternative._id)\n    console.log(\"result: \", this.state.results[alternative._id]));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: alternatives.map((alternative, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: questionId,\n            value: alternative._id,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 34\n          }, this), \" \", alternative.text, \" \", renderResult(alternative._id)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderResult(alternativeId) {\n    console.log(alternativeId);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.renderDescription(), this.renderQuestions(), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["D:/Te/dev/quafundo_client/react-api/src/components/quiz.js"],"names":["React","Quiz","Component","constructor","props","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","data","then","response","setState","results","json","catch","error","console","log","handleChange","key","target","name","toString","value","state","questions","componentDidMount","renderDescription","description","quiz","renderQuestions","perguntas","map","question","index","renderAlternatives","_id","alternatives","questionId","alternative","text","renderResult","alternativeId","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass Quiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {questions: [], results: []}\r\n        this.data = {}\r\n        this.results = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    onSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        await fetch('http://localhost:8000/responder', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(this.data),\r\n        })\r\n        .then(async response => { this.setState({results: await response.json()}) })\r\n        .catch( error => {console.log(error)})\r\n    }\r\n\r\n    handleChange = e => {\r\n        const key = e.target.name.toString()\r\n        const value = e.target.value.toString()\r\n        this.data[key] = value\r\n    }\r\n\r\n    renderDescription() {\r\n        const description = this.props.quiz.description\r\n        \r\n        if (typeof(description) === 'undefined') {return (<div>carregando...</div>)}\r\n\r\n        return(\r\n            <h1>{description}</h1>\r\n        )\r\n    }\r\n\r\n    renderQuestions() {\r\n        const questions = this.props.quiz.perguntas\r\n\r\n        if (typeof(questions) === 'undefined') {return (<div>carregando...</div>)}\r\n\r\n        return (\r\n            <div>\r\n            {   questions.map( (question, index) => (\r\n                    <h3 key={index}> {question.description} {this.renderAlternatives(question._id, question.alternatives)} </h3> \r\n                )) \r\n            } \r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderAlternatives(questionId,alternatives) {\r\n        //{this.state.results[alternative._id]}\r\n        console.log('Results: ', this.state.results);\r\n        //console.log('Len results ', this.state.results.length)\r\n        //console.log('questionId: ', questionId)\r\n        //console.log(\"result: \", this.state.results[questionId])\r\n        alternatives.map( (alternative, index) => (\r\n                //console.log(\"alternative._id: \", alternative._id)\r\n                console.log(\"result: \", this.state.results[alternative._id])\r\n        ));\r\n\r\n        return(\r\n            <div>\r\n                {\r\n                    alternatives.map( (alternative, index) => (\r\n                        <div key={index}>\r\n                            <h5> <input type=\"radio\" name={questionId} value={alternative._id}  onChange={this.handleChange}></input> {alternative.text} {renderResult(alternative._id)}</h5>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderResult(alternativeId) {\r\n        console.log(alternativeId)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.onSubmit}>\r\n                <div>\r\n                    {this.renderDescription()}\r\n                    {this.renderQuestions()}\r\n                    <button>Enviar</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}